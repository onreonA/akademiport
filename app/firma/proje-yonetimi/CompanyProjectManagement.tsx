'use client';
import Link from 'next/link';
import { useCallback, useEffect, useState } from 'react';

import { useAuthStore } from '@/lib/stores/auth-store';
interface Project {
  id: string;
  name: string;
  description: string;
  startDate: string;
  endDate: string;
  type: 'B2B' | 'B2C';
  status: 'Planlandı' | 'Aktif' | 'Tamamlandı' | 'Duraklatıldı';
  progress: number;
  subProjectCount: number;
  assignedCompanies: number;
  consultantName: string;
  adminNote: string;
}
interface SubProject {
  id: string;
  name: string;
  description: string;
  startDate: string;
  endDate: string;
  status: 'Planlandı' | 'Aktif' | 'Tamamlandı' | 'Duraklatıldı';
  progress: number;
  taskCount: number;
  completedTasks: number;
  isAutoGenerated: boolean;
}
interface Task {
  id: string;
  title: string;
  description: string;
  status: 'Bekliyor' | 'İncelemede' | 'Tamamlandı' | 'İptal Edildi';
  priority: 'Düşük' | 'Orta' | 'Yüksek';
  dueDate: string;
  notes: string;
  attachments: string[];
  completedAt: string;
}
const ProjectCard = ({ project }: { project: Project }) => {
  const getTypeColor = (type: 'B2B' | 'B2C') => {
    return type === 'B2B'
      ? 'bg-blue-100 text-blue-800'
      : 'bg-purple-100 text-purple-800';
  };
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Planlandı':
        return 'bg-yellow-100 text-yellow-800';
      case 'Aktif':
        return 'bg-green-100 text-green-800';
      case 'Tamamlandı':
        return 'bg-blue-100 text-blue-800';
      case 'Duraklatıldı':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };
  const getProgressColor = (progress: number) => {
    if (progress >= 80) return 'bg-green-500';
    if (progress >= 50) return 'bg-blue-500';
    if (progress >= 20) return 'bg-yellow-500';
    return 'bg-red-500';
  };
  return (
    <div className='bg-white rounded-xl shadow-sm border border-gray-100 p-6 hover:shadow-md transition-all duration-200'>
      <div className='flex justify-between items-start mb-4'>
        <div className='flex-1'>
          <div className='flex items-center space-x-3 mb-2'>
            <h3 className='text-lg font-semibold text-gray-900'>
              {project.name}
            </h3>
            <div className='flex space-x-2'>
              <span
                className={`px-2 py-1 text-xs font-medium rounded-full ${getTypeColor(project.type)}`}
              >
                {project.type}
              </span>
              <span
                className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(project.status)}`}
              >
                {project.status}
              </span>
            </div>
          </div>
          <p className='text-gray-600 text-sm mb-3 line-clamp-2'>
            {project.description}
          </p>
          <div className='flex items-center text-sm text-gray-500 mb-3'>
            <i className='ri-calendar-line mr-1'></i>
            <span>
              {new Date(project.startDate).toLocaleDateString('tr-TR')} -{' '}
              {new Date(project.endDate).toLocaleDateString('tr-TR')}
            </span>
          </div>
          {project.consultantName && (
            <div className='flex items-center text-sm text-gray-500 mb-3'>
              <i className='ri-user-star-line mr-1'></i>
              <span>Danışman: {project.consultantName}</span>
            </div>
          )}
          <div className='grid grid-cols-1 sm:grid-cols-3 gap-2 sm:gap-4 text-sm mb-4'>
            <div className='flex items-center justify-between sm:justify-start'>
              <span className='text-gray-500'>Alt Proje:</span>
              <span className='ml-1 font-medium text-gray-900'>
                {project.subProjectCount}
              </span>
            </div>
            <div className='flex items-center justify-between sm:justify-start'>
              <span className='text-gray-500'>Atanmış Firma:</span>
              <span className='ml-1 font-medium text-gray-900'>
                {project.assignedCompanies}
              </span>
            </div>
            <div className='flex items-center justify-between sm:justify-start'>
              <span className='text-gray-500'>İlerleme:</span>
              <span className='ml-1 font-medium text-gray-900'>
                {project.progress}%
              </span>
            </div>
          </div>
          <div className='mb-4'>
            <div className='flex items-center justify-between text-sm mb-1'>
              <span className='text-gray-500'>İlerleme</span>
              <span className='font-medium text-gray-900'>
                {project.progress}%
              </span>
            </div>
            <div className='w-full bg-gray-200 rounded-full h-2'>
              <div
                className={`h-2 rounded-full transition-all duration-300 ${getProgressColor(project.progress)}`}
                style={{ width: `${project.progress}%` }}
              ></div>
            </div>
          </div>
          {project.adminNote && (
            <div className='mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg'>
              <div className='flex items-start gap-2'>
                <i className='ri-information-line text-blue-500 mt-0.5'></i>
                <div>
                  <p className='text-sm font-medium text-blue-900 mb-1'>
                    Admin Notu
                  </p>
                  <p className='text-sm text-blue-700'>{project.adminNote}</p>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
      <div className='flex gap-2'>
        <Link href={`/firma/proje-yonetimi/${project.id}`}>
          <button className='flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg font-medium transition-colors cursor-pointer whitespace-nowrap'>
            Detayları Görüntüle
          </button>
        </Link>
      </div>
    </div>
  );
};
const SubProjectCard = ({ subProject }: { subProject: SubProject }) => {
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Planlandı':
        return 'bg-yellow-100 text-yellow-800';
      case 'Aktif':
        return 'bg-green-100 text-green-800';
      case 'Tamamlandı':
        return 'bg-blue-100 text-blue-800';
      case 'Duraklatıldı':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };
  const getProgressColor = (progress: number) => {
    if (progress >= 80) return 'bg-green-500';
    if (progress >= 50) return 'bg-blue-500';
    if (progress >= 20) return 'bg-yellow-500';
    return 'bg-red-500';
  };
  return (
    <div className='bg-white rounded-lg shadow-sm border border-gray-100 p-4 hover:shadow-md transition-all duration-200'>
      <div className='flex justify-between items-start mb-3'>
        <div className='flex-1'>
          <div className='flex items-center space-x-2 mb-2'>
            <h4 className='text-md font-semibold text-gray-900'>
              {subProject.name}
            </h4>
            <span
              className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(subProject.status)}`}
            >
              {subProject.status}
            </span>
            {subProject.isAutoGenerated && (
              <span className='px-2 py-1 text-xs font-medium rounded-full bg-purple-100 text-purple-800'>
                Otomatik
              </span>
            )}
          </div>
          <p className='text-gray-600 text-sm mb-2 line-clamp-2'>
            {subProject.description}
          </p>
          <div className='flex items-center text-sm text-gray-500 mb-2'>
            <i className='ri-calendar-line mr-1'></i>
            <span>
              {new Date(subProject.startDate).toLocaleDateString('tr-TR')} -{' '}
              {new Date(subProject.endDate).toLocaleDateString('tr-TR')}
            </span>
          </div>
          <div className='grid grid-cols-2 gap-2 text-sm mb-3'>
            <div className='flex items-center justify-between'>
              <span className='text-gray-500'>Görev:</span>
              <span className='font-medium text-gray-900'>
                {subProject.taskCount}
              </span>
            </div>
            <div className='flex items-center justify-between'>
              <span className='text-gray-500'>Tamamlanan:</span>
              <span className='font-medium text-green-600'>
                {subProject.completedTasks}
              </span>
            </div>
          </div>
          <div className='mb-3'>
            <div className='flex items-center justify-between text-sm mb-1'>
              <span className='text-gray-500'>İlerleme</span>
              <span className='font-medium text-gray-900'>
                {subProject.progress}%
              </span>
            </div>
            <div className='w-full bg-gray-200 rounded-full h-2'>
              <div
                className={`h-2 rounded-full transition-all duration-300 ${getProgressColor(subProject.progress)}`}
                style={{ width: `${subProject.progress}%` }}
              ></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
const TaskCard = ({ task }: { task: Task }) => {
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Bekliyor':
        return 'bg-yellow-100 text-yellow-800';
      case 'İncelemede':
        return 'bg-blue-100 text-blue-800';
      case 'Tamamlandı':
        return 'bg-green-100 text-green-800';
      case 'İptal Edildi':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };
  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'Yüksek':
        return 'bg-red-100 text-red-800';
      case 'Orta':
        return 'bg-orange-100 text-orange-800';
      case 'Düşük':
        return 'bg-green-100 text-green-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };
  return (
    <div className='bg-white rounded-lg shadow-sm border border-gray-100 p-4 hover:shadow-md transition-all duration-200'>
      <div className='flex justify-between items-start mb-3'>
        <div className='flex-1'>
          <div className='flex items-center space-x-2 mb-2'>
            <h4 className='text-md font-semibold text-gray-900'>
              {task.title}
            </h4>
            <span
              className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(task.status)}`}
            >
              {task.status}
            </span>
            <span
              className={`px-2 py-1 text-xs font-medium rounded-full ${getPriorityColor(task.priority)}`}
            >
              {task.priority}
            </span>
          </div>
          <p className='text-gray-600 text-sm mb-2 line-clamp-2'>
            {task.description}
          </p>
          <div className='flex items-center text-sm text-gray-500 mb-2'>
            <i className='ri-calendar-line mr-1'></i>
            <span>
              Bitiş: {new Date(task.dueDate).toLocaleDateString('tr-TR')}
            </span>
          </div>
          {task.notes && (
            <div className='mb-2 p-2 bg-gray-50 border border-gray-200 rounded text-sm text-gray-700'>
              <p className='font-medium mb-1'>Notlar:</p>
              <p>{task.notes}</p>
            </div>
          )}
          {task.attachments && task.attachments.length > 0 && (
            <div className='mb-2'>
              <p className='text-sm font-medium text-gray-700 mb-1'>Ekler:</p>
              <div className='flex flex-wrap gap-1'>
                {task.attachments.map((attachment, index) => (
                  <span
                    key={index}
                    className='px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded'
                  >
                    {attachment}
                  </span>
                ))}
              </div>
            </div>
          )}
          {task.completedAt && (
            <div className='text-sm text-green-600'>
              <i className='ri-check-line mr-1'></i>
              Tamamlandı:{' '}
              {new Date(task.completedAt).toLocaleDateString('tr-TR')}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};
export default function CompanyProjectManagement() {
  const { user } = useAuthStore();
  const [filterStatus, setFilterStatus] = useState('Tümü');
  const [filterType, setFilterType] = useState('Tümü');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [projects, setProjects] = useState<Project[]>([]);
  const [selectedProject, setSelectedProject] = useState<Project | null>(null);
  const [subProjects, setSubProjects] = useState<SubProject[]>([]);
  const [tasks, setTasks] = useState<Task[]>([]);
  const [viewMode, setViewMode] = useState<
    'projects' | 'subProjects' | 'tasks'
  >('projects');
  const fetchProjects = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      const userEmail = user?.email || '';
      if (!userEmail) {
        setError('Kullanıcı bilgisi bulunamadı');
        return;
      }
      const response = await fetch('/api/projects', {
        headers: {
          'X-User-Email': userEmail,
        },
      });
      if (!response.ok) {
        throw new Error('Projeler yüklenirken hata oluştu');
      }
      const data = await response.json();
      console.log('🔍 CompanyProjectManagement - API Response:', data);
      console.log('🔍 CompanyProjectManagement - Projects:', data.projects);
      setProjects(data.projects || []);
    } catch (err) {
      console.error('❌ CompanyProjectManagement - API Error:', err);
      setError(err instanceof Error ? err.message : 'Bilinmeyen hata');
      // Mock data kullanma, sadece hata göster
      setProjects([]);
    } finally {
      setLoading(false);
    }
  }, [user]);
  // Projeleri API'den yükle
  useEffect(() => {
    if (user) {
      fetchProjects();
    } else {
      setLoading(false);
    }
  }, [user, fetchProjects]);
  const fetchSubProjects = async (projectId: string) => {
    try {
      const userEmail = user?.email || '';
      if (!userEmail) {
        return;
      }
      const response = await fetch(`/api/projects/${projectId}/sub-projects`, {
        headers: {
          'X-User-Email': userEmail,
        },
      });
      if (response.ok) {
        const data = await response.json();
        setSubProjects(data.subProjects || []);
      } else {
        // Mock data
        setSubProjects([
          {
            id: '1',
            name: 'Platform Analizi ve Uyumluluk Kontrolü',
            description:
              'Firmanın mevcut sistemlerinin e-ihracat platformlarıyla uyumluluğunun analiz edilmesi',
            startDate: '2024-01-15',
            endDate: '2024-02-15',
            status: 'Tamamlandı',
            progress: 100,
            taskCount: 3,
            completedTasks: 3,
            isAutoGenerated: false,
          },
          {
            id: '2',
            name: 'API Entegrasyonu Dokümantasyonu',
            description:
              "E-ihracat platformu API'lerinin detaylı dokümantasyonunun incelenmesi",
            startDate: '2024-02-01',
            endDate: '2024-03-01',
            status: 'Tamamlandı',
            progress: 100,
            taskCount: 2,
            completedTasks: 2,
            isAutoGenerated: false,
          },
          {
            id: '3',
            name: 'Test Ortamı Kurulumu',
            description:
              'Entegrasyon testleri için gerekli test ortamının kurulması',
            startDate: '2024-03-01',
            endDate: '2024-03-15',
            status: 'Aktif',
            progress: 60,
            taskCount: 5,
            completedTasks: 3,
            isAutoGenerated: true,
          },
        ]);
      }
    } catch (error) {}
  };
  const fetchTasks = async (subProjectId: string) => {
    try {
      const userEmail = user?.email || '';
      if (!userEmail) {
        return;
      }
      const response = await fetch(`/api/sub-projects/${subProjectId}/tasks`, {
        headers: {
          'X-User-Email': userEmail,
        },
      });
      if (response.ok) {
        const data = await response.json();
        setTasks(data.tasks || []);
      } else {
        // Mock data
        setTasks([
          {
            id: '1',
            title: 'Sistem Analizi Raporu',
            description: 'Mevcut sistemlerin analiz edilmesi ve raporlanması',
            status: 'Tamamlandı',
            priority: 'Yüksek',
            dueDate: '2024-02-10',
            notes:
              'Sistem analizi tamamlandı. ERP entegrasyonu için ek modül gerekiyor.',
            attachments: ['analiz_raporu.pdf'],
            completedAt: '2024-02-10',
          },
          {
            id: '2',
            title: 'API Dokümantasyonu İnceleme',
            description: 'Platform API dokümantasyonunun detaylı incelenmesi',
            status: 'Tamamlandı',
            priority: 'Orta',
            dueDate: '2024-02-25',
            notes:
              'API dokümantasyonu incelendi ve entegrasyon planı hazırlandı.',
            attachments: ['api_dokuman.pdf'],
            completedAt: '2024-02-25',
          },
          {
            id: '3',
            title: 'Test Ortamı Kurulumu',
            description: 'Gerekli test ortamının kurulması',
            status: 'İncelemede',
            priority: 'Yüksek',
            dueDate: '2024-03-10',
            notes:
              'Test ortamı kuruldu, ilk testler yapıldı. Bazı hatalar tespit edildi.',
            attachments: ['test_raporu.pdf'],
            completedAt: '',
          },
        ]);
      }
    } catch (error) {}
  };
  const handleProjectSelect = async (project: Project) => {
    setSelectedProject(project);
    setViewMode('subProjects');
    await fetchSubProjects(project.id);
  };
  const handleSubProjectSelect = async (subProject: SubProject) => {
    setViewMode('tasks');
    await fetchTasks(subProject.id);
  };
  const filteredProjects = projects.filter(project => {
    const statusMatch =
      filterStatus === 'Tümü' || project.status === filterStatus;
    const typeMatch = filterType === 'Tümü' || project.type === filterType;
    return statusMatch && typeMatch;
  });
  // Dashboard istatistikleri
  const dashboardStats = [
    {
      title: 'Toplam Proje',
      value: projects.length,
      icon: 'ri-folder-line',
      color: 'bg-blue-100 text-blue-600',
    },
    {
      title: 'Aktif Proje',
      value: projects.filter(p => p.status === 'Aktif' || p.status === 'active')
        .length,
      icon: 'ri-play-circle-line',
      color: 'bg-green-100 text-green-600',
    },
    {
      title: 'Tamamlanan',
      value: projects.filter(
        p => p.status === 'Tamamlandı' || p.status === 'completed'
      ).length,
      icon: 'ri-check-line',
      color: 'bg-purple-100 text-purple-600',
    },
    {
      title: 'Ortalama İlerleme',
      value:
        projects.length > 0
          ? Math.round(
              projects.reduce((sum, p) => sum + (p.progress || 0), 0) /
                projects.length
            ) + '%'
          : '0%',
      icon: 'ri-bar-chart-line',
      color: 'bg-orange-100 text-orange-600',
    },
  ];
  const renderContent = () => {
    if (viewMode === 'subProjects' && selectedProject) {
      return (
        <div className='space-y-6'>
          <div className='flex items-center justify-between'>
            <div className='flex items-center gap-4'>
              <button
                onClick={() => setViewMode('projects')}
                className='flex items-center gap-2 text-blue-600 hover:text-blue-700'
              >
                <i className='ri-arrow-left-line'></i>
                Projelere Dön
              </button>
              <h2 className='text-xl font-semibold text-gray-900'>
                {selectedProject.name} - Alt Projeler
              </h2>
            </div>
          </div>
          <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'>
            {subProjects.map(subProject => (
              <div
                key={subProject.id}
                onClick={() => handleSubProjectSelect(subProject)}
              >
                <SubProjectCard subProject={subProject} />
              </div>
            ))}
          </div>
        </div>
      );
    }
    if (viewMode === 'tasks') {
      return (
        <div className='space-y-6'>
          <div className='flex items-center justify-between'>
            <div className='flex items-center gap-4'>
              <button
                onClick={() => setViewMode('subProjects')}
                className='flex items-center gap-2 text-blue-600 hover:text-blue-700'
              >
                <i className='ri-arrow-left-line'></i>
                Alt Projelere Dön
              </button>
              <h2 className='text-xl font-semibold text-gray-900'>Görevler</h2>
            </div>
          </div>
          <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'>
            {tasks.map(task => (
              <TaskCard key={`company-tasks-${task.id}`} task={task} />
            ))}
          </div>
        </div>
      );
    }
    return (
      <div className='space-y-6'>
        {/* Dashboard Stats */}
        <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4'>
          {dashboardStats.map((stat, index) => (
            <div
              key={index}
              className='bg-white rounded-xl shadow-sm border border-gray-100 p-4'
            >
              <div className='flex items-center justify-between'>
                <div>
                  <p className='text-sm text-gray-600 mb-1'>{stat.title}</p>
                  <p className='text-2xl font-bold text-gray-900'>
                    {stat.value}
                  </p>
                </div>
                <div
                  className={`w-12 h-12 rounded-lg flex items-center justify-center ${stat.color}`}
                >
                  <i className={`${stat.icon} text-xl`}></i>
                </div>
              </div>
            </div>
          ))}
        </div>
        {/* Filter Controls */}
        <div className='flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4'>
          <h2 className='text-xl font-semibold text-gray-900'>Projelerim</h2>
          <div className='flex flex-wrap gap-2'>
            <select
              value={filterStatus}
              onChange={e => setFilterStatus(e.target.value)}
              className='px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
            >
              <option value='Tümü'>Tüm Durumlar</option>
              <option value='Planlandı'>Planlandı</option>
              <option value='Aktif'>Aktif</option>
              <option value='Tamamlandı'>Tamamlandı</option>
              <option value='Duraklatıldı'>Duraklatıldı</option>
            </select>
            <select
              value={filterType}
              onChange={e => setFilterType(e.target.value)}
              className='px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
            >
              <option value='Tümü'>Tüm Türler</option>
              <option value='B2B'>B2B</option>
              <option value='B2C'>B2C</option>
            </select>
          </div>
        </div>
        {/* Error Message */}
        {error && (
          <div className='p-4 bg-red-50 border border-red-200 rounded-lg'>
            <div className='flex items-center gap-2'>
              <i className='ri-error-warning-line text-red-500'></i>
              <span className='text-red-700 font-medium'>{error}</span>
              <button
                onClick={() => setError(null)}
                className='ml-auto text-red-500 hover:text-red-700'
              >
                <i className='ri-close-line'></i>
              </button>
            </div>
          </div>
        )}
        {/* Loading State */}
        {loading ? (
          <div className='flex items-center justify-center py-12'>
            <div className='flex items-center gap-3'>
              <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600'></div>
              <span className='text-gray-600'>Projeler yükleniyor...</span>
            </div>
          </div>
        ) : (
          <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'>
            {filteredProjects.length === 0 ? (
              <div className='col-span-full text-center py-12'>
                <div className='w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4'>
                  <i className='ri-folder-line text-gray-400 text-3xl'></i>
                </div>
                <h3 className='text-lg font-medium text-gray-900 mb-2'>
                  {projects.length === 0
                    ? 'Henüz proje bulunmuyor'
                    : 'Proje bulunamadı'}
                </h3>
                <p className='text-gray-500'>
                  {projects.length === 0
                    ? 'Size henüz proje atanmamış. Lütfen admin ile iletişime geçin.'
                    : 'Seçilen duruma uygun proje bulunmuyor.'}
                </p>
              </div>
            ) : (
              filteredProjects.map(project => (
                <div
                  key={project.id}
                  onClick={() => handleProjectSelect(project)}
                >
                  <ProjectCard project={project} />
                </div>
              ))
            )}
          </div>
        )}
      </div>
    );
  };
  return <div className='space-y-6'>{renderContent()}</div>;
}
